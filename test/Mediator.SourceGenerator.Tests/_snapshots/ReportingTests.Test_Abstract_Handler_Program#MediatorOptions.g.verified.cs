//HintName: MediatorOptions.g.cs
// <auto-generated>
//     Generated by the Mediator source generator.
// </auto-generated>

namespace Mediator
{
    /// <summary>
    /// Provide options for the Mediator source generator.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    public sealed class MediatorOptions
    {
        /// <summary>
        /// The namespace in which the Mediator implementation is generated.
        /// By default, the namespace is "Mediator".
        /// </summary>
        public string Namespace { get; set; } = "Mediator";

        /// <summary>
        /// The <see cref="global::Mediator.INotificationPublisher" /> type to use when publishing notifications.
        /// By default, the type is <see cref="global::Mediator.ForeachAwaitPublisher" />.
        /// </summary>
        public global::System.Type NotificationPublisherType { get; set; } = typeof(global::Mediator.ForeachAwaitPublisher);

        /// <summary>
        /// The default lifetime of the services registered in the DI container by the Mediator source generator.
        /// By default, the lifetime is <see cref="global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />.
        /// </summary>
        public global::Microsoft.Extensions.DependencyInjection.ServiceLifetime ServiceLifetime { get; set; } =
            global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton;

        /// <summary>
        /// Lista opcional de ensamblados a incluir para filtrar los registros a realizar.
        /// Si la colección está vacía o es nula, se consideran todos los ensamblados disponibles en la compilación.
        /// </summary>
        public global::System.Reflection.Assembly[] TargetAssemblies { get; set; } = global::System.Array.Empty<global::System.Reflection.Assembly>();

        /// <summary>
        /// The namespace in which the AddMediator extension method class is generated.
        /// By default, this is "Microsoft.Extensions.DependencyInjection".
        /// Setting it to a custom namespace will avoid collisions if the same extension type
        /// is generated across multiple assemblies.
        /// </summary>
        public string ExtensionMethodNamespace { get; set; } = "Microsoft.Extensions.DependencyInjection";
    }
}
